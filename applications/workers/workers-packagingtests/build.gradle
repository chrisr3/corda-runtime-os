plugins {
    id 'org.jetbrains.kotlin.jvm'
}

description 'Worker Packagingtests'

configurations {
    cpis {
        canBeConsumed = false
        transitive = false
    }
    cpiForFlowCacheTest {
        canBeConsumed = false
        transitive = false
    }
    cpiWithoutChangelogs {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV1 {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV2 {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV3 {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV4 {
        canBeConsumed = false
        transitive = false
    }
}

sourceSets {
    packagingTest {
        java {
            srcDirs += [ 'src/packagingTest/java' ]
        }
        kotlin {
            srcDirs += [ 'src/packagingTest/kotlin' ]
        }
        resources {
            srcDirs = [ 'src/packagingTest/resources' ]
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

kotlin {
    target {
        java
        compilations.packagingTest {
            associateWith compilations.main
            associateWith compilations.test

            configurations {
                packagingTestApi.extendsFrom testApi
                packagingTestImplementation.extendsFrom testImplementation
                packagingTestRuntimeOnly.extendsFrom testRuntimeOnly
            }
        }
    }
}

dependencies {
    // NO CORDA DEPENDENCIES!!
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.4.2"

    // Avoid having the schema names and keys scattered across projects
    packagingTestImplementation "net.corda:corda-config-schema:$cordaApiVersion"

    // But building a cpb for use in a test is ok.
    cpis project(path: ':notary-plugins:notary-plugin-non-validating:notary-plugin-non-validating-server', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:packaging-verification-contract-v1', configuration: 'cordaCPB')

    cpis project(path: ':testing:cpbs:ledger-consensual-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-utxo-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:mgm', configuration: 'cordaCPB')
    cpiForFlowCacheTest project(path: ':testing:cpbs:test-cordapp-for-cache-testing', configuration: 'cordaCPB')
    cpiWithoutChangelogs project(path: ':testing:cpbs:test-cordapp-without-changelogs', configuration: 'cordaCPB')
    upgradeTestingCpiV1 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v1', configuration: 'cordaCPB')
    upgradeTestingCpiV2 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v2', configuration: 'cordaCPB')
    upgradeTestingCpiV3 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v3', configuration: 'cordaCPB')
    upgradeTestingCpiV4 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v4', configuration: 'cordaCPB')

    packagingTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    packagingTestImplementation project(':testing:test-utilities')
    packagingTestImplementation project(':testing:e2e-test-utilities')

    packagingTestImplementation project(':applications:workers:worker-e2e-test-utils')
    packagingTestImplementation project(':components:flow:flow-rest-resource-service')
    packagingTestImplementation project(":testing:packaging-test-utilities")
    packagingTestImplementation "org.eclipse.jetty.websocket:websocket-client:$jettyVersion"
    packagingTestImplementation "org.slf4j:slf4j-api:$slf4jVersion"

    packagingTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    packagingTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
}

def packagingTestResources = tasks.named('processPackagingTestResources', ProcessResources) {
    from(configurations.cpis) {
        into 'META-INF'
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "\$1\$3"
    }

    // These CPBs need to have the same name as the main test-cordapp because they test force-upload to overwrite existing CPIs.
    // Put the test-cordapp-for-cache-testing cpb into a different folder
    def cpiForFlowCacheTest = configurations.cpiForFlowCacheTest
    def cacheTestingDir = "META-INF" + File.separator + "cache-invalidation-testing"
    from(cpiForFlowCacheTest) {
        into cacheTestingDir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "test-cordapp.cpb"
    }

    // Put the test-cordapp-without-changelogs cpb into a different folder
    def cpiWithoutChangelogsTest = configurations.cpiWithoutChangelogs
    def dirForCpiWithoutChangelogs = "META-INF" + File.separator + "cpi-without-changelogs"
    from(cpiWithoutChangelogsTest) {
        into dirForCpiWithoutChangelogs
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "test-cordapp.cpb"
    }

    // Put the test cordapp for upgrade testing (v1) into a folder
    def upgradeTestingCpiV1 = configurations.upgradeTestingCpiV1
    def upgradeTestingCpiV1Dir = "META-INF" + File.separator + "upgrade-testing-v1"
    from(upgradeTestingCpiV1) {
        into upgradeTestingCpiV1Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
    // Put the test cordapp for upgrade testing (v2) into a folder
    def upgradeTestingCpiV2 = configurations.upgradeTestingCpiV2
    def upgradeTestingCpiV2Dir = "META-INF" + File.separator + "upgrade-testing-v2"
    from(upgradeTestingCpiV2) {
        into upgradeTestingCpiV2Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
    // Put the test cordapp for upgrade testing (v3) into a folder
    def upgradeTestingCpiV3 = configurations.upgradeTestingCpiV3
    def upgradeTestingCpiV3Dir = "META-INF" + File.separator + "upgrade-testing-v3"
    from(upgradeTestingCpiV3) {
        into upgradeTestingCpiV3Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
    // Put the test cordapp for upgrade testing (v4) into a folder
    def upgradeTestingCpiV4 = configurations.upgradeTestingCpiV4
    def upgradeTestingCpiV4Dir = "META-INF" + File.separator + "upgrade-testing-v4"
    from(upgradeTestingCpiV4) {
        into upgradeTestingCpiV4Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
}

tasks.register('packagingTest', Test) {
    description = "Runs packaging tests."
    group = "verification"

    testClassesDirs = project.sourceSets["packagingTest"].output.classesDirs
    classpath = project.sourceSets["packagingTest"].runtimeClasspath

    def combinedWorker = project.getProperties().getOrDefault("isCombinedWorker",false)
    systemProperty "restEndpointUrl", project.getProperties().getOrDefault("restEndpointUrl","https://localhost:8888/")

    // Note these port values have to match what is setup as part of port forwarding at cluster bootstrap time.
    // E.g. during Jenkins pipeline setup.
    systemProperty "cryptoWorkerHealthHttp",
            project.getProperties().getOrDefault("cryptoWorkerHealthHttp",combinedWorker ? null : "http://localhost:7001/")
    systemProperty "restWorkerHealthHttp",
            project.getProperties().getOrDefault("restWorkerHealthHttp",combinedWorker ? null : "http://localhost:7002/")
    systemProperty "flowWorkerHealthHttp",
            project.getProperties().getOrDefault("flowWorkerHealthHttp",combinedWorker ? null : "http://localhost:7003/")
    systemProperty "dbWorkerHealthHttp",
            project.getProperties().getOrDefault("dbWorkerHealthHttp",combinedWorker ? null : "http://localhost:7004/")

    systemProperty "combinedWorkerHealthHttp",
            project.getProperties().getOrDefault("combinedWorkerHealthHttp", combinedWorker ? "http://localhost:7004/" : null)
}


tasks.named('packagingTest', Test) {
    dependsOn packagingTestResources
}
