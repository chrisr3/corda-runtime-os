@Library('corda-shared-build-pipeline-steps@ronanb/e2e-test-helpers') _


import groovy.transform.Field

@Field
String k8sNamespace = "run-${UUID.randomUUID().toString()}"

/*
 * Jenkins agent label to build on
 */
String agentLabel = 'docker'

/*
 * Docker label to use with worker base image
 */
String dockerLabel = '11'

/*
 * architecture string for Corda images
 */
String architectureTag = ''

/*
 * architecture for Kubernetes workers during E2E tests
 */
String e2eArchitecture = 'amd64'

switch (params.BUILD_ARCH) {
    case '':
    case null:
    case 'amd64':
        break;
    case 'arm64':
        agentLabel = 'arm64'
        dockerLabel = 'arm64-11'
        architectureTag = 'arm64-'
        e2eArchitecture = 'arm64'
        break
    default:
        error """\
                Not supported value for pipeline parameter 'BUILD_ARCH': '${params.BUILD_ARCH}'.
                One of 'amd64' (default) or 'arm64' is allowed.
            """.stripIndent()
        break
}


pipeline {
    agent {
        docker {
            image "build-zulu-openjdk:${dockerLabel}"
            label "${agentLabel}"
            registryUrl 'https://engineering-docker.software.r3.com/'
            registryCredentialsId 'artifactory-credentials'
            // Volume used to mount storage from the host as a volume to persist the cache between builds
            // Additional hosts used to facilitate access to Kafka
            args '-v /tmp:/host_tmp'
            // make sure build image is always fresh
            alwaysPull true
        }
    }

    parameters {
        string(name: 'BUILD_REV', defaultValue: '', description: 'Short git hash of the build revision to test - leave blank to test unstable')
        choice(name: 'BUILD_ARCH', choices: ['amd64', 'arm64'], description: 'Build architecture')
        booleanParam(name: 'KEEP_NS', defaultValue: false, description: 'Determines if the k8s Namespace is to be preserved or deleted at the end of the build.')
    }

    environment {
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        BASE_IMAGE = getBaseImage(params.BUILD_REV, architectureTag)
        BUILD_CACHE_CREDENTIALS = credentials('gradle-ent-cache-credentials')
        BUILD_CACHE_USERNAME = "${env.BUILD_CACHE_CREDENTIALS_USR}"
        BUILD_CACHE_PASSWORD = "${env.BUILD_CACHE_CREDENTIALS_PSW}"
        CORDA_ARTIFACTORY_USERNAME = "${env.ARTIFACTORY_CREDENTIALS_USR}"
        CORDA_ARTIFACTORY_PASSWORD = "${env.ARTIFACTORY_CREDENTIALS_PSW}"
        CORDA_USE_CACHE = "corda-remotes"
        KUBECONFIG = credentials("e2e-tests-credentials")
        CORDA_CLI_USER_HOME = "/tmp/corda-cli-home"
        CORDA_GRADLE_SCAN_KEY = credentials('gradle-build-scans-key')
        GRADLE_USER_HOME = "/host_tmp/gradle"
        CORDA_REVISION = "${env.GIT_COMMIT}"
        NAMESPACE = "$k8sNamespace"
        CLUSTER_NAME = "eks-e2e.e2e.awsdev.r3.com"
        HELM_CONFIG_HOME = "/tmp/helm"
        HELM_REPOSITORY_CACHE = "/host_tmp/helm/repository"
        GRADLE_PERFORMANCE_TUNING = "--parallel -Dscan.tag.E2E -Dscan.tag.${env.NAMESPACE} --build-cache"
        E2E_CLUSTER_A_RPC_PORT=8887
        E2E_CLUSTER_B_RPC_PORT=8888
        E2E_CLUSTER_C_RPC_PORT=8889
        E2E_CLUSTER_A_P2P_HOST="corda-alice-p2p-gateway-worker.${NAMESPACE}.svc.cluster.local"
        E2E_CLUSTER_B_P2P_HOST="corda-bob-p2p-gateway-worker.${NAMESPACE}.svc.cluster.local"
        E2E_CLUSTER_C_P2P_HOST="corda-caroline-p2p-gateway-worker.${NAMESPACE}.svc.cluster.local"
        E2E_BRANCH_LABEL = "${sanitizedBranchName()}"
        E2E_WORKER_ARCH = "${e2eArchitecture}"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage ('Create namespace') {
            steps {
                e2eTestHelpers.createNameSpace(env.NAMESPACE, env.E2E_WORKER_ARCH, env.E2E_BRANCH_LABEL)
            }
        }
        stage('Install kafka as prereqs') {
            steps {
                e2eTestHelpers.installPrereqs()
            }
            post {
                unsuccessful {
                    sh './support_bundle.sh ${NAMESPACE}'
                    archiveArtifacts artifacts: '*-support-bundle-*.tgz', allowEmptyArchive: true
                    sh 'rm -f *-support-bundle-*.tgz'
                }
            }
        }
        stage('Deploy clusters') {
           parallel {
               stage("Deploy Alice cluster") {
                  steps {
                      e2eTestHelpers.deployCorda("alice", "${NAMESPACE}", "${BASE_IMAGE}", env.E2E_WORKER_ARCH)
                  }
               }
               stage("Deploy Bob cluster") {
                  steps {
                      e2eTestHelpers.deployCorda("bob", "${NAMESPACE}", "${BASE_IMAGE}", env.E2E_WORKER_ARCH)
                  }
               }
               stage("Deploy Caroline cluster") {
                  steps {
                      e2eTestHelpers.deployCorda("caroline", "${NAMESPACE}", "${BASE_IMAGE}", env.E2E_WORKER_ARCH)
                  }
               }
           }
            post {
                unsuccessful {
                    sh './support_bundle.sh ${NAMESPACE}'
                    archiveArtifacts artifacts: '*-support-bundle-*.tgz', allowEmptyArchive: true
                    sh 'rm -f *-support-bundle-*.tgz'
                }
            }
        }
        stage('Forward port and run tests') {
            environment {
                E2E_CLUSTER_A_RPC_PASSWORD = "${getInitialAdminPassword('alice')}"
                E2E_CLUSTER_B_RPC_PASSWORD = "${getInitialAdminPassword('bob')}"
                E2E_CLUSTER_C_RPC_PASSWORD = "${getInitialAdminPassword('caroline')}"

                // Bob's cluster is used as a primary access point by Smoke and E2E tests
                INITIAL_ADMIN_USER_PASSWORD = "${E2E_CLUSTER_B_RPC_PASSWORD}"
            }

            steps {
                script {
                    def workers = ['crypto-worker', 'rpc-worker', 'flow-worker','db-worker']
                    def clusters = ['alice','bob','caroline']

                    portForwarding("prereqs-kafka-0", 9092,9092)

                    clusters.eachWithIndex {c, index  ->
                       portForwarding("deployment/corda-$c-rpc-worker", 8887 + index, 8888)
                    }
                    workers.eachWithIndex {w, index  ->
                       portForwarding("deployment/corda-bob-$w", 7001 + index, 7000)
                    }
                }
                sh '''\
                    ./gradlew smokeTest ${GRADLE_PERFORMANCE_TUNING}
                    ./gradlew e2eTest ${GRADLE_PERFORMANCE_TUNING}
                '''.stripIndent()
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/test-results/**/TEST-*.xml'
                    sh './support_bundle.sh ${NAMESPACE}'
                    archiveArtifacts artifacts: 'forward.txt, *-support-bundle-*.tgz', allowEmptyArchive: true
                    sh 'rm -f forward.txt *-support-bundle-*.tgz'
                }
            }
        }
    }
    post {
        always {
            findBuildScans()
            splunkLogGenerator()
            script{
                createSummary("yellow.png").appendText("<a href='https://r3ll3.splunkcloud.com/en-US/app/r3_kubernetes_app/namespace_details?form.namespace=${NAMESPACE}&form.cluster_name=eks-e2e&form.period.earliest=0&form.period.latest=&form.span=5m&form.pod=*&form.event_message=*'>Splunk K8s E2E Dashboard</a>", false)
                writeFile file: "e2eTestDataForSplunk.log", text: "${env.BUILD_URL}\n${NAMESPACE}"
                archiveArtifacts artifacts: "e2eTestDataForSplunk.log", fingerprint: true
                if (!params.KEEP_NS) {
                    sh 'kubectl delete ns "${NAMESPACE}"'
                }
            }
        }
    }
}

// K8s labels can not be greater than 63 characters
// Helper method to sanitize edge cases of very long branch names
def sanitizedBranchName(){
    return (env.BRANCH_NAME.length() > 60 ? env.BRANCH_NAME.substring(0,60).replace('/','-') : env.BRANCH_NAME.replace('/','-')).replaceFirst(/-+$/,'')
}

// Helper to expose ports prior to test execution
def portForwarding(def name, def port, def portMapping = null){
    sh "nohup .ci/e2eTests/utils/kubectl-port-forward-with-reconnect.sh ${NAMESPACE} $name $port $portMapping >> forward.txt 2>&1 &"
}

def getBaseImage(def buildRev, def architectureTag) {
    return buildRev ? "preTest-${architectureTag}${buildRev}" : "${architectureTag}unstable"
}

def getInitialAdminPassword(def name) {
    def cmd = "kubectl get secret corda-${name}-initial-admin-user -n ${NAMESPACE} -o go-template='{{ .data.password | base64decode }}'"
    return sh(script: cmd, returnStdout: true)
}
